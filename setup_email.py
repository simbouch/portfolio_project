#!/usr/bin/env python3
"""
Quick Email Setup Script for Portfolio Contact Form

This script helps you set up email functionality quickly and securely.
It will guide you through the process and test the configuration.

Usage:
    python setup_email.py

This script will:
1. Guide you through Gmail App Password setup
2. Create a .env file with your configuration
3. Test the email functionality
4. Provide deployment instructions
"""

import os
import sys
import getpass
from flask import Flask
from flask_mail import Mail, Message


def print_header(title):
    """Print a formatted header."""
    print("\n" + "=" * 60)
    print(f"  {title}")
    print("=" * 60)


def print_step(step_num, title):
    """Print a formatted step."""
    print(f"\nüìã Step {step_num}: {title}")
    print("-" * 40)


def get_gmail_app_password():
    """Guide user through Gmail App Password setup."""
    print_header("GMAIL APP PASSWORD SETUP")

    print(
        """
üîê To use Gmail for your contact form, you need an App Password.

üìù Follow these steps:

1. Go to: https://myaccount.google.com/security
2. Make sure 2-Step Verification is ON
3. Click on "App passwords" 
4. Select "Mail" and generate a password
5. Copy the 16-character password (spaces don't matter)

‚ö†Ô∏è  IMPORTANT: Use the App Password, NOT your regular Gmail password!
"""
    )

    email = input(
        "Enter your Gmail address (e.g., khribech.chouaib@gmail.com): "
    ).strip()

    while True:
        if "@gmail.com" not in email.lower():
            print("‚ùå Please enter a valid Gmail address")
            email = input("Enter your Gmail address: ").strip()
        else:
            break

    print(f"\nüìß Using email: {email}")

    app_password = getpass.getpass(
        "Enter your 16-character App Password (hidden): "
    ).strip()

    # Remove spaces from app password
    app_password = app_password.replace(" ", "")

    if len(app_password) != 16:
        print(
            f"‚ö†Ô∏è  Warning: App Password should be 16 characters, you entered {len(app_password)}"
        )
        confirm = input("Continue anyway? (y/n): ").strip().lower()
        if confirm != "y":
            return None, None

    return email, app_password


def create_env_file(email, app_password):
    """Create .env file with email configuration."""
    print_step(2, "Creating .env Configuration File")

    env_content = f"""# Portfolio Email Configuration
# Generated by setup_email.py

# Flask Configuration
SECRET_KEY=your-super-secret-key-change-in-production
FLASK_ENV=development

# Email Configuration (Gmail)
MAIL_SERVER=smtp.gmail.com
MAIL_PORT=587
MAIL_USE_TLS=true
MAIL_USE_SSL=false
MAIL_USERNAME={email}
MAIL_PASSWORD={app_password}
MAIL_DEFAULT_SENDER={email}
CONTACT_EMAIL={email}

# Database
DATABASE_URL=sqlite:///portfolio.db
"""

    try:
        with open(".env", "w") as f:
            f.write(env_content)
        print("‚úÖ .env file created successfully!")
        print("üìÅ Location: .env")
        return True
    except Exception as e:
        print(f"‚ùå Error creating .env file: {e}")
        return False


def test_email_configuration(email):
    """Test the email configuration."""
    print_step(3, "Testing Email Configuration")

    try:
        # Load environment variables from .env file
        from dotenv import load_dotenv

        load_dotenv()
    except ImportError:
        print("‚ö†Ô∏è  python-dotenv not installed. Loading environment manually...")
        # Manually load .env file
        if os.path.exists(".env"):
            with open(".env", "r") as f:
                for line in f:
                    if "=" in line and not line.startswith("#"):
                        key, value = line.strip().split("=", 1)
                        os.environ[key] = value

    # Create Flask app for testing
    app = Flask(__name__)

    # Configure Flask app
    app.config["MAIL_SERVER"] = os.environ.get("MAIL_SERVER")
    app.config["MAIL_PORT"] = int(os.environ.get("MAIL_PORT", 587))
    app.config["MAIL_USE_TLS"] = True
    app.config["MAIL_USERNAME"] = os.environ.get("MAIL_USERNAME")
    app.config["MAIL_PASSWORD"] = os.environ.get("MAIL_PASSWORD")
    app.config["CONTACT_EMAIL"] = os.environ.get("CONTACT_EMAIL")

    print(f"üìß Testing email to: {app.config['CONTACT_EMAIL']}")

    # Initialize Flask-Mail
    mail = Mail(app)

    try:
        with app.app_context():
            # Create test message
            msg = Message(
                subject="‚úÖ Portfolio Contact Form - Email Setup Successful!",
                sender=app.config["MAIL_USERNAME"],
                recipients=[app.config["CONTACT_EMAIL"]],
                reply_to="setup-test@portfolio.com",
            )

            msg.body = f"""Congratulations! Your portfolio contact form email is working perfectly!

Setup Details:
- Email Server: {app.config['MAIL_SERVER']}
- Email Account: {app.config['MAIL_USERNAME']}
- Contact Email: {app.config['CONTACT_EMAIL']}

Your contact form is now ready to receive messages from visitors.

This test was sent by setup_email.py script.
"""

            msg.html = f"""
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
                <h2 style="color: #28a745;">‚úÖ Email Setup Successful!</h2>
                <p>Congratulations! Your portfolio contact form email is working perfectly!</p>
                
                <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
                    <h3>Setup Details:</h3>
                    <ul>
                        <li><strong>Email Server:</strong> {app.config['MAIL_SERVER']}</li>
                        <li><strong>Email Account:</strong> {app.config['MAIL_USERNAME']}</li>
                        <li><strong>Contact Email:</strong> {app.config['CONTACT_EMAIL']}</li>
                    </ul>
                </div>
                
                <div style="background: #d4edda; padding: 15px; border-radius: 8px; border-left: 4px solid #28a745;">
                    <p><strong>üéâ Your contact form is now ready to receive messages from visitors!</strong></p>
                </div>
                
                <hr style="margin: 30px 0;">
                <p style="color: #666; font-size: 14px;">
                    This test was sent by the setup_email.py script.
                </p>
            </div>
            """

            # Send the email
            mail.send(msg)
            print("‚úÖ Test email sent successfully!")
            print(f"üì¨ Check your inbox at: {email}")
            return True

    except Exception as e:
        print(f"‚ùå Error sending test email: {str(e)}")
        print("\nüîß Common issues and solutions:")
        print("1. Double-check your App Password (16 characters)")
        print("2. Make sure 2-Step Verification is enabled on Gmail")
        print("3. Try generating a new App Password")
        print("4. Check if Gmail is blocking the connection")
        return False


def show_deployment_instructions():
    """Show instructions for deploying to production."""
    print_header("PRODUCTION DEPLOYMENT INSTRUCTIONS")

    print(
        """
üöÄ To deploy your portfolio with working email to Render:

1. üìÅ Commit your changes to Git:
   git add .
   git commit -m "Add email configuration"
   git push

2. üåê In your Render dashboard:
   - Go to your portfolio service
   - Click "Environment"
   - Add these environment variables:

   MAIL_SERVER=smtp.gmail.com
   MAIL_PORT=587
   MAIL_USE_TLS=true
   MAIL_USERNAME=your-email@gmail.com
   MAIL_PASSWORD=your-app-password
   CONTACT_EMAIL=your-email@gmail.com

3. üîÑ Deploy your service

‚ö†Ô∏è  IMPORTANT: Never commit your .env file to Git!
   Your .gitignore already excludes it for security.

‚úÖ After deployment, test your contact form at:
   https://your-portfolio-url.onrender.com/contact
"""
    )


def main():
    """Main setup function."""
    print_header("PORTFOLIO EMAIL SETUP")
    print("This script will help you set up email for your contact form.")

    # Check if .env already exists
    if os.path.exists(".env"):
        print("‚ö†Ô∏è  .env file already exists!")
        overwrite = input("Do you want to overwrite it? (y/n): ").strip().lower()
        if overwrite != "y":
            print("Setup cancelled.")
            return

    print_step(1, "Gmail App Password Setup")

    # Get Gmail credentials
    email, app_password = get_gmail_app_password()
    if not email or not app_password:
        print("‚ùå Setup cancelled.")
        return

    # Create .env file
    if not create_env_file(email, app_password):
        print("‚ùå Setup failed.")
        return

    # Test email configuration
    if test_email_configuration(email):
        print("\nüéâ Email setup completed successfully!")
        show_deployment_instructions()
    else:
        print("\n‚ùå Email test failed. Please check your configuration.")


if __name__ == "__main__":
    main()
